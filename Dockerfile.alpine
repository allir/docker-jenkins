ARG TAG=alpine
FROM jenkins/jenkins:$TAG
LABEL maintainer="alli@allir.org"

# Variables
## GOSU Version to install
## The docker group GID from the host, this can be set when it's not 999 on the host
ENV GOSU_VERSION="1.10" \
    DOCKER_UID=1000 \
    DOCKER_GID=999 \
    DOCKER_GROUP=docker

# Install GOSU and the latest Docker CE binaries
USER root
RUN set -ex \
    `# Install Dependencies`\
      && buildDeps='dpkg gnupg openssl' \
      && apk --no-cache add \
        shadow \
        $buildDeps \
    `# Install GOSU` \
	&& dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
	&& wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch" \
	&& wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
	&& gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
	&& rm -r /usr/local/bin/gosu.asc \
	&& chmod +x /usr/local/bin/gosu \
    `# Install Docker CE` \
      && apk add docker py-pip && pip install --upgrade pip \
      && pip install docker-compose \
    `# Cleanup` \
      && apk del --purge $buildDeps \
      && rm -rf /var/cache/apk/* /tmp/* /var/tmp/* 

# Run jenkins after running docker entrypoint script
# Everything runs as root (or last USER directive) gosu is then used in the script
# docker-entrypoint.sh usage: <user> <script> 
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
COPY docker-entrypoint.d/* /etc/docker-entrypoint.d/
RUN chmod u=rx,go= /usr/local/bin/docker-entrypoint.sh \
    && chmod u=rx,go= /etc/docker-entrypoint.d/*
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh", "sbin/tini","--","/usr/local/bin/jenkins.sh"]

